/**
 * 管理员基础服务类
 * 从 admin.ts 中安全分离的基础CRUD操作
 */

import bcrypt from 'bcrypt';
import pool from '../../config/database.js';

// 管理员数据接口
export interface Admin {
  id: string;
  username: string;
  email: string;
  role: string;
  status: string;
  department_id?: number;
  position_id?: number;
  created_at: Date;
  updated_at: Date;
  last_login?: Date;
  last_login_at?: Date;
}

// 管理员搜索参数接口
export interface AdminSearchParams {
  page: number;
  limit: number;
  search?: string;
  role?: string;
  status?: string;
}

// 管理员创建数据接口
export interface AdminCreateData {
  username: string;
  email: string;
  password: string;
  role: string;
  status?: string;
  department_id?: number;
  position_id?: number;
}

// 管理员更新数据接口
export interface AdminUpdateData {
  username?: string;
  email?: string;
  role?: string;
  status?: string;
  department_id?: number;
  position_id?: number;
}

export class AdminService {
  /**
   * 获取管理员列表
   */
  static async getAdmins(params: AdminSearchParams) {
    const { page, limit, search, role, status } = params;
    const offset = (page - 1) * limit;

    // 构建查询条件
    const conditions: string[] = [];
    const values: any[] = [];
    let paramIndex = 1;

    if (search) {
      conditions.push(`(username ILIKE $${paramIndex} OR email ILIKE $${paramIndex})`);
      values.push(`%${search}%`);
      paramIndex++;
    }

    if (role) {
      conditions.push(`role = $${paramIndex}`);
      values.push(role);
      paramIndex++;
    }

    if (status) {
      conditions.push(`status = $${paramIndex}`);
      values.push(status);
      paramIndex++;
    }

    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';

    // 获取总数
    const countQuery = `
      SELECT COUNT(*) as total
      FROM admins
      ${whereClause}
    `;
    const countResult = await pool.query(countQuery, values);
    const total = parseInt(countResult.rows[0].total);

    // 获取数据
    const dataQuery = `
      SELECT 
        id,
        username,
        email,
        role,
        status,
        department_id,
        position_id,
        created_at,
        updated_at,
        last_login,
        last_login_at
      FROM admins
      ${whereClause}
      ORDER BY created_at DESC
      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
    `;
    values.push(limit, offset);
    
    const dataResult = await pool.query(dataQuery, values);

    return {
      admins: dataResult.rows,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    };
  }

  /**
   * 根据ID获取管理员详情
   */
  static async getAdminById(id: string): Promise<Admin | null> {
    const query = `
      SELECT 
        id,
        username,
        email,
        role,
        status,
        department_id,
        position_id,
        created_at,
        updated_at,
        last_login,
        last_login_at
      FROM admins
      WHERE id = $1
    `;
    
    const result = await pool.query(query, [id]);
    return result.rows[0] || null;
  }

  /**
   * 创建管理员
   */
  static async createAdmin(data: AdminCreateData): Promise<Admin> {
    const { username, email, password, role, status = 'active', department_id, position_id } = data;

    // 检查用户名是否已存在
    const existingUsername = await pool.query(
      'SELECT id FROM admins WHERE username = $1',
      [username]
    );
    if (existingUsername.rows.length > 0) {
      throw new Error('用户名已存在');
    }

    // 检查邮箱是否已存在
    const existingEmail = await pool.query(
      'SELECT id FROM admins WHERE email = $1',
      [email]
    );
    if (existingEmail.rows.length > 0) {
      throw new Error('邮箱已存在');
    }

    // 验证部门是否存在
    if (department_id) {
      const departmentExists = await pool.query(
        'SELECT id FROM departments WHERE id = $1 AND status = $2',
        [department_id, 'active']
      );
      if (departmentExists.rows.length === 0) {
        throw new Error('指定的部门不存在或已禁用');
      }
    }

    // 验证岗位是否存在
    if (position_id) {
      const positionExists = await pool.query(
        'SELECT id FROM positions WHERE id = $1 AND status = $2',
        [position_id, 'active']
      );
      if (positionExists.rows.length === 0) {
        throw new Error('指定的岗位不存在或已禁用');
      }
    }

    // 加密密码
    const hashedPassword = await bcrypt.hash(password, 10);

    const query = `
      INSERT INTO admins (username, email, password_hash, role, status, department_id, position_id)
      VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING 
        id,
        username,
        email,
        role,
        status,
        department_id,
        position_id,
        created_at,
        updated_at
    `;
    
    const result = await pool.query(query, [username, email, hashedPassword, role, status, department_id, position_id]);
    return result.rows[0];
  }

  /**
   * 更新管理员信息
   */
  static async updateAdmin(id: string, data: AdminUpdateData): Promise<Admin | null> {
    const { username, email, role, status, department_id, position_id } = data;

    // 动态构建更新字段
    const updateFields: string[] = [];
    const values: any[] = [];
    let paramIndex = 1;

    if (username !== undefined) {
      // 检查用户名是否已被其他管理员使用
      const existingUsername = await pool.query(
        'SELECT id FROM admins WHERE username = $1 AND id != $2',
        [username, id]
      );
      if (existingUsername.rows.length > 0) {
        throw new Error('用户名已存在');
      }
      updateFields.push(`username = $${paramIndex}`);
      values.push(username);
      paramIndex++;
    }

    if (email !== undefined) {
      // 检查邮箱是否已被其他管理员使用
      const existingEmail = await pool.query(
        'SELECT id FROM admins WHERE email = $1 AND id != $2',
        [email, id]
      );
      if (existingEmail.rows.length > 0) {
        throw new Error('邮箱已存在');
      }
      updateFields.push(`email = $${paramIndex}`);
      values.push(email);
      paramIndex++;
    }

    if (role !== undefined) {
      updateFields.push(`role = $${paramIndex}`);
      values.push(role);
      paramIndex++;
    }

    if (status !== undefined) {
      updateFields.push(`status = $${paramIndex}`);
      values.push(status);
      paramIndex++;
    }

    if (department_id !== undefined) {
      if (department_id !== null) {
        // 验证部门是否存在
        const departmentExists = await pool.query(
          'SELECT id FROM departments WHERE id = $1 AND status = $2',
          [department_id, 'active']
        );
        if (departmentExists.rows.length === 0) {
          throw new Error('指定的部门不存在或已禁用');
        }
      }
      updateFields.push(`department_id = $${paramIndex}`);
      values.push(department_id);
      paramIndex++;
    }

    if (position_id !== undefined) {
      if (position_id !== null) {
        // 验证岗位是否存在
        const positionExists = await pool.query(
          'SELECT id FROM positions WHERE id = $1 AND status = $2',
          [position_id, 'active']
        );
        if (positionExists.rows.length === 0) {
          throw new Error('指定的岗位不存在或已禁用');
        }
      }
      updateFields.push(`position_id = $${paramIndex}`);
      values.push(position_id);
      paramIndex++;
    }

    if (updateFields.length === 0) {
      // 没有字段需要更新，直接返回当前数据
      return this.getAdminById(id);
    }

    updateFields.push(`updated_at = NOW()`);
    values.push(id);

    const query = `
      UPDATE admins
      SET ${updateFields.join(', ')}
      WHERE id = $${paramIndex}
      RETURNING 
        id,
        username,
        email,
        role,
        status,
        department_id,
        position_id,
        created_at,
        updated_at,
        last_login,
        last_login_at
    `;
    
    const result = await pool.query(query, values);
    return result.rows[0] || null;
  }

  /**
   * 更新管理员状态
   */
  static async updateAdminStatus(id: string, status: string): Promise<Admin | null> {
    const query = `
      UPDATE admins
      SET status = $1, updated_at = NOW()
      WHERE id = $2
      RETURNING 
        id,
        username,
        email,
        role,
        status,
        department_id,
        position_id,
        created_at,
        updated_at,
        last_login,
        last_login_at
    `;
    
    const result = await pool.query(query, [status, id]);
    return result.rows[0] || null;
  }

  /**
   * 重置管理员密码
   */
  static async resetAdminPassword(id: string, password: string): Promise<boolean> {
    const hashedPassword = await bcrypt.hash(password, 10);
    
    const query = `
      UPDATE admins
      SET password_hash = $1, updated_at = NOW()
      WHERE id = $2
    `;
    
    const result = await pool.query(query, [hashedPassword, id]);
    return result.rowCount > 0;
  }

  /**
   * 删除管理员
   */
  static async deleteAdmin(id: string): Promise<boolean> {
    // 检查是否为超级管理员（可能需要特殊保护）
    const admin = await this.getAdminById(id);
    if (!admin) {
      return false;
    }

    // 可以添加额外的业务逻辑，比如不允许删除最后一个超级管理员
    if (admin.role === 'super_admin') {
      const superAdminCount = await pool.query(
        'SELECT COUNT(*) as count FROM admins WHERE role = $1 AND status = $2',
        ['super_admin', 'active']
      );
      if (parseInt(superAdminCount.rows[0].count) <= 1) {
        throw new Error('不能删除最后一个超级管理员');
      }
    }

    const query = 'DELETE FROM admins WHERE id = $1';
    const result = await pool.query(query, [id]);
    return result.rowCount > 0;
  }

  /**
   * 更新管理员最后登录时间
   */
  static async updateLastLogin(id: string): Promise<void> {
    const query = `
      UPDATE admins
      SET last_login = NOW(), last_login_at = NOW()
      WHERE id = $1
    `;
    await pool.query(query, [id]);
  }
}
