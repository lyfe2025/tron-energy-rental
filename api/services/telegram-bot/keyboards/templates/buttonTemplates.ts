/**
 * ÊåâÈíÆÊ®°Êùø
 * ÂÆö‰πâÂêÑÁßçÊ†áÂáÜÊåâÈíÆÈÖçÁΩÆÊ®°Êùø
 */
import TelegramBot from 'node-telegram-bot-api';

/**
 * ÈÄöÁî®ÊåâÈíÆÊ®°Êùø
 */
export const COMMON_BUTTONS = {
  // ÂØºËà™ÊåâÈíÆ
  BACK_TO_MENU: { text: 'üîô ËøîÂõû‰∏ªËèúÂçï', callback_data: 'refresh_menu' },
  BACK: { text: 'üîô ËøîÂõû', callback_data: 'back' },
  CANCEL: { text: '‚ùå ÂèñÊ∂à', callback_data: 'cancel' },
  REFRESH: { text: 'üîÑ Âà∑Êñ∞', callback_data: 'refresh' },

  // Á°ÆËÆ§ÊåâÈíÆ
  CONFIRM: { text: '‚úÖ Á°ÆËÆ§', callback_data: 'confirm' },
  YES: { text: '‚úÖ ÊòØ', callback_data: 'yes' },
  NO: { text: '‚ùå Âê¶', callback_data: 'no' },

  // Êìç‰ΩúÊåâÈíÆ
  EDIT: { text: '‚úèÔ∏è ÁºñËæë', callback_data: 'edit' },
  DELETE: { text: 'üóëÔ∏è Âà†Èô§', callback_data: 'delete' },
  VIEW: { text: 'üëÅÔ∏è Êü•Áúã', callback_data: 'view' },
  DOWNLOAD: { text: 'üì• ‰∏ãËΩΩ', callback_data: 'download' },

  // ÂàÜÈ°µÊåâÈíÆ
  PREV_PAGE: { text: '‚¨ÖÔ∏è ‰∏ä‰∏ÄÈ°µ', callback_data: 'prev_page' },
  NEXT_PAGE: { text: '‰∏ã‰∏ÄÈ°µ ‚û°Ô∏è', callback_data: 'next_page' },
  FIRST_PAGE: { text: '‚èÆÔ∏è È¶ñÈ°µ', callback_data: 'first_page' },
  LAST_PAGE: { text: '‚è≠Ô∏è Êú´È°µ', callback_data: 'last_page' },

  // Â∏ÆÂä©ÂíåÊîØÊåÅ
  HELP: { text: '‚ùì Â∏ÆÂä©', callback_data: 'help' },
  CONTACT_SUPPORT: { text: 'üìû ËÅîÁ≥ªÂÆ¢Êúç', callback_data: 'contact_support' },
  FAQ: { text: 'üí° Â∏∏ËßÅÈóÆÈ¢ò', callback_data: 'faq' },
  FEEDBACK: { text: 'üìù ÂèçÈ¶à', callback_data: 'feedback' }
};

/**
 * ‰∏öÂä°Áõ∏ÂÖ≥ÊåâÈíÆÊ®°Êùø
 */
export const BUSINESS_BUTTONS = {
  // ËÉΩÈáèÁõ∏ÂÖ≥
  BUY_ENERGY: { text: 'üîã Ë¥≠‰π∞ËÉΩÈáè', callback_data: 'buy_energy' },
  ENERGY_FLASH: { text: '‚ö° ËÉΩÈáèÈó™Áßü', callback_data: 'energy_flash' },
  ENERGY_PACKAGE: { text: 'üì¶ ËÉΩÈáèÂ•óÈ§ê', callback_data: 'energy_package' },

  // ËÆ¢ÂçïÁõ∏ÂÖ≥
  MY_ORDERS: { text: 'üìã ÊàëÁöÑËÆ¢Âçï', callback_data: 'my_orders' },
  ORDER_HISTORY: { text: 'üìú ËÆ¢ÂçïÂéÜÂè≤', callback_data: 'order_history' },
  ORDER_STATUS: { text: 'üìä ËÆ¢ÂçïÁä∂ÊÄÅ', callback_data: 'order_status' },

  // Ë¥¶Êà∑Áõ∏ÂÖ≥
  CHECK_BALANCE: { text: 'üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù', callback_data: 'check_balance' },
  RECHARGE: { text: 'üí≥ ÂÖÖÂÄº', callback_data: 'recharge' },
  WITHDRAW: { text: 'üí∏ ÊèêÁé∞', callback_data: 'withdraw' },

  // ‰∫§ÊòìÁõ∏ÂÖ≥
  TRX_EXCHANGE: { text: 'üîÑ TRXÈó™ÂÖë', callback_data: 'trx_exchange' },
  TRANSACTION_PACKAGE: { text: 'üì¶ Á¨îÊï∞Â•óÈ§ê', callback_data: 'transaction_package' },

  // ÁªüËÆ°Áõ∏ÂÖ≥
  STATISTICS: { text: 'üìä ÁªüËÆ°Êü•ËØ¢', callback_data: 'statistics' },
  MY_STATS: { text: 'üìà ÊàëÁöÑÁªüËÆ°', callback_data: 'my_stats' },
  REVENUE: { text: 'üí∞ Êî∂ÁõäÁªüËÆ°', callback_data: 'revenue' }
};

/**
 * ÁÆ°ÁêÜÁõ∏ÂÖ≥ÊåâÈíÆÊ®°Êùø
 */
export const ADMIN_BUTTONS = {
  // Áî®Êà∑ÁÆ°ÁêÜ
  USER_MANAGEMENT: { text: 'üë• Áî®Êà∑ÁÆ°ÁêÜ', callback_data: 'admin_users' },
  USER_LIST: { text: 'üìù Áî®Êà∑ÂàóË°®', callback_data: 'user_list' },
  USER_SEARCH: { text: 'üîç ÊêúÁ¥¢Áî®Êà∑', callback_data: 'user_search' },

  // ËÆ¢ÂçïÁÆ°ÁêÜ
  ORDER_MANAGEMENT: { text: 'üìã ËÆ¢ÂçïÁÆ°ÁêÜ', callback_data: 'admin_orders' },
  ORDER_LIST: { text: 'üìù ËÆ¢ÂçïÂàóË°®', callback_data: 'order_list' },
  ORDER_SEARCH: { text: 'üîç ÊêúÁ¥¢ËÆ¢Âçï', callback_data: 'order_search' },

  // Á≥ªÁªüÁÆ°ÁêÜ
  SYSTEM_SETTINGS: { text: '‚öôÔ∏è Á≥ªÁªüËÆæÁΩÆ', callback_data: 'admin_settings' },
  BOT_MANAGEMENT: { text: 'ü§ñ Êú∫Âô®‰∫∫ÁÆ°ÁêÜ', callback_data: 'bot_management' },
  PRICE_CONFIG: { text: 'üí∞ ‰ª∑Ê†ºÈÖçÁΩÆ', callback_data: 'price_config' },

  // Êï∞ÊçÆÁªüËÆ°
  DATA_STATS: { text: 'üìä Êï∞ÊçÆÁªüËÆ°', callback_data: 'admin_stats' },
  GLOBAL_STATS: { text: 'üåç ÂÖ®Á´ôÁªüËÆ°', callback_data: 'global_stats' },
  REPORTS: { text: 'üìä Êï∞ÊçÆÊä•Ë°®', callback_data: 'reports' }
};

/**
 * ËÆæÁΩÆÁõ∏ÂÖ≥ÊåâÈíÆÊ®°Êùø
 */
export const SETTINGS_BUTTONS = {
  // ËØ≠Ë®ÄËÆæÁΩÆ
  LANGUAGE_SETTINGS: { text: 'üåê ËØ≠Ë®ÄËÆæÁΩÆ', callback_data: 'settings_language' },
  CHINESE_SIMPLIFIED: { text: 'üá®üá≥ ÁÆÄ‰Ωì‰∏≠Êñá', callback_data: 'lang_zh_cn' },
  CHINESE_TRADITIONAL: { text: 'üáπüáº ÁπÅÈ´î‰∏≠Êñá', callback_data: 'lang_zh_tw' },
  ENGLISH: { text: 'üá∫üá∏ English', callback_data: 'lang_en' },
  JAPANESE: { text: 'üáØüáµ Êó•Êú¨Ë™û', callback_data: 'lang_ja' },
  KOREAN: { text: 'üá∞üá∑ ÌïúÍµ≠Ïñ¥', callback_data: 'lang_ko' },

  // ÈÄöÁü•ËÆæÁΩÆ
  NOTIFICATION_SETTINGS: { text: 'üîî ÈÄöÁü•ËÆæÁΩÆ', callback_data: 'settings_notifications' },
  ORDER_NOTIFICATIONS: { text: 'üìß ËÆ¢ÂçïÈÄöÁü•', callback_data: 'notif_orders' },
  BALANCE_NOTIFICATIONS: { text: 'üí∞ ‰ΩôÈ¢ùÈÄöÁü•', callback_data: 'notif_balance' },
  MARKETING_NOTIFICATIONS: { text: 'üéØ Ëê•ÈîÄÈÄöÁü•', callback_data: 'notif_marketing' },
  SYSTEM_NOTIFICATIONS: { text: 'üîî Á≥ªÁªüÈÄöÁü•', callback_data: 'notif_system' },

  // ÂÆâÂÖ®ËÆæÁΩÆ
  SECURITY_SETTINGS: { text: 'üîê ÂÆâÂÖ®ËÆæÁΩÆ', callback_data: 'settings_security' },
  CHANGE_PASSWORD: { text: 'üîë ‰øÆÊîπÂØÜÁ†Å', callback_data: 'change_password' },
  TWO_FA: { text: 'üõ°Ô∏è ‰∏§Ê≠•È™åËØÅ', callback_data: 'two_fa' },

  // ÊîØ‰ªòËÆæÁΩÆ
  PAYMENT_SETTINGS: { text: 'üí≥ ÊîØ‰ªòËÆæÁΩÆ', callback_data: 'settings_payment' },
  PAYMENT_METHODS: { text: 'üí≥ ÊîØ‰ªòÊñπÂºè', callback_data: 'payment_methods' },
  AUTO_RECHARGE: { text: 'üîÑ Ëá™Âä®ÂÖÖÂÄº', callback_data: 'auto_recharge' }
};

/**
 * Áä∂ÊÄÅÂàáÊç¢ÊåâÈíÆÊ®°Êùø
 */
export const TOGGLE_BUTTONS = {
  ENABLE: { text: '‚úÖ ÂêØÁî®', callback_data: 'enable' },
  DISABLE: { text: '‚ùå Á¶ÅÁî®', callback_data: 'disable' },
  ON: { text: 'üü¢ ÂºÄÂêØ', callback_data: 'on' },
  OFF: { text: 'üî¥ ÂÖ≥Èó≠', callback_data: 'off' },
  ACTIVE: { text: '‚úÖ ÊøÄÊ¥ª', callback_data: 'active' },
  INACTIVE: { text: '‚è∏Ô∏è ÊöÇÂÅú', callback_data: 'inactive' }
};

/**
 * ÂàõÂª∫ÊåâÈíÆÁªÑÂêà
 */
export const BUTTON_COMBINATIONS = {
  /** Á°ÆËÆ§/ÂèñÊ∂àÁªÑÂêà */
  CONFIRM_CANCEL: [
    COMMON_BUTTONS.CONFIRM,
    COMMON_BUTTONS.CANCEL
  ],

  /** ÊòØ/Âê¶ÁªÑÂêà */
  YES_NO: [
    COMMON_BUTTONS.YES,
    COMMON_BUTTONS.NO
  ],

  /** ÁºñËæë/Âà†Èô§ÁªÑÂêà */
  EDIT_DELETE: [
    COMMON_BUTTONS.EDIT,
    COMMON_BUTTONS.DELETE
  ],

  /** ÂêØÁî®/Á¶ÅÁî®ÁªÑÂêà */
  ENABLE_DISABLE: [
    TOGGLE_BUTTONS.ENABLE,
    TOGGLE_BUTTONS.DISABLE
  ],

  /** ÂàÜÈ°µÂØºËà™ÁªÑÂêà */
  PAGINATION: [
    COMMON_BUTTONS.PREV_PAGE,
    COMMON_BUTTONS.NEXT_PAGE
  ],

  /** ÂÆåÊï¥ÂàÜÈ°µÁªÑÂêà */
  FULL_PAGINATION: [
    COMMON_BUTTONS.FIRST_PAGE,
    COMMON_BUTTONS.PREV_PAGE,
    COMMON_BUTTONS.NEXT_PAGE,
    COMMON_BUTTONS.LAST_PAGE
  ]
};

/**
 * Âä®ÊÄÅÊåâÈíÆÂ∑•ÂéÇÂáΩÊï∞
 */
export class ButtonFactory {
  /**
   * ÂàõÂª∫Â∏¶Êï∞ÊçÆÁöÑÊåâÈíÆ
   */
  static createButton(text: string, action: string, data?: string): TelegramBot.InlineKeyboardButton {
    const callback_data = data ? `${action}_${data}` : action;
    return { text, callback_data };
  }

  /**
   * ÂàõÂª∫URLÊåâÈíÆ
   */
  static createUrlButton(text: string, url: string): TelegramBot.InlineKeyboardButton {
    return { text, url };
  }

  /**
   * ÂàõÂª∫ÂàÜÈ°µÊåâÈíÆ
   */
  static createPaginationButton(
    currentPage: number,
    totalPages: number,
    action: string = 'page'
  ): TelegramBot.InlineKeyboardButton[] {
    const buttons: TelegramBot.InlineKeyboardButton[] = [];

    if (currentPage > 1) {
      buttons.push({
        text: '‚¨ÖÔ∏è ‰∏ä‰∏ÄÈ°µ',
        callback_data: `${action}_${currentPage - 1}`
      });
    }

    buttons.push({
      text: `${currentPage} / ${totalPages}`,
      callback_data: 'page_info'
    });

    if (currentPage < totalPages) {
      buttons.push({
        text: '‰∏ã‰∏ÄÈ°µ ‚û°Ô∏è',
        callback_data: `${action}_${currentPage + 1}`
      });
    }

    return buttons;
  }

  /**
   * ÂàõÂª∫Êï∞Â≠óÈÄâÊã©ÊåâÈíÆ
   */
  static createNumberButtons(
    min: number,
    max: number,
    action: string = 'select',
    buttonsPerRow: number = 3
  ): TelegramBot.InlineKeyboardButton[][] {
    const buttons: TelegramBot.InlineKeyboardButton[][] = [];
    let currentRow: TelegramBot.InlineKeyboardButton[] = [];

    for (let i = min; i <= max; i++) {
      currentRow.push({
        text: i.toString(),
        callback_data: `${action}_${i}`
      });

      if (currentRow.length === buttonsPerRow || i === max) {
        buttons.push([...currentRow]);
        currentRow = [];
      }
    }

    return buttons;
  }

  /**
   * ÂàõÂª∫ÈÄâÈ°πÊåâÈíÆ
   */
  static createOptionButtons(
    options: { text: string; value: string }[],
    action: string = 'option',
    buttonsPerRow: number = 2
  ): TelegramBot.InlineKeyboardButton[][] {
    const buttons: TelegramBot.InlineKeyboardButton[][] = [];
    let currentRow: TelegramBot.InlineKeyboardButton[] = [];

    options.forEach((option, index) => {
      currentRow.push({
        text: option.text,
        callback_data: `${action}_${option.value}`
      });

      if (currentRow.length === buttonsPerRow || index === options.length - 1) {
        buttons.push([...currentRow]);
        currentRow = [];
      }
    });

    return buttons;
  }
}

/**
 * Ëé∑ÂèñÊåâÈíÆÊ®°Êùø
 */
export function getButton(category: string, buttonName: string): TelegramBot.InlineKeyboardButton | null {
  const categories: Record<string, Record<string, TelegramBot.InlineKeyboardButton>> = {
    common: COMMON_BUTTONS,
    business: BUSINESS_BUTTONS,
    admin: ADMIN_BUTTONS,
    settings: SETTINGS_BUTTONS,
    toggle: TOGGLE_BUTTONS
  };

  return categories[category]?.[buttonName] || null;
}
