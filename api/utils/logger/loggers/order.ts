/**
 * ËÆ¢ÂçïÂ§ÑÁêÜ‰∏ìÁî®ÁöÑÊó•ÂøóËÆ∞ÂΩïÂô®
 */
import path from 'path';
import winston from 'winston';
import DailyRotateFile from 'winston-daily-rotate-file';
import { ensureDirectory } from '../core/config';
import { orderFormat } from '../core/formatters';
import { LOG_LEVELS } from '../core/types';

// üì¶ ÂàõÂª∫ËÆ¢ÂçïÂ§ÑÁêÜ‰∏ìÁî®ÁöÑÊó•ÂøóËÆ∞ÂΩïÂô®
export function createOrderLogger(): winston.Logger {
  const logDir = path.join(process.cwd(), 'logs', 'business', 'orders');
  
  // Á°Æ‰øùÊó•ÂøóÁõÆÂΩïÂ≠òÂú®
  ensureDirectory(logDir);
  
  return winston.createLogger({
    levels: LOG_LEVELS,
    format: orderFormat,
    transports: [
      // ËÆ¢ÂçïÂ§ÑÁêÜÊó•Âøó - ÊåâÊó•ÊúüËΩÆËΩ¨
      new DailyRotateFile({
        filename: path.join(logDir, 'order-processing-%DATE%.log'),
        datePattern: 'YYYY-MM-DD',
        maxSize: '20m',
        maxFiles: '30d', // ËÆ¢ÂçïÊó•Âøó‰øùÁïô30Â§©
        level: 'info',
      }),
      // ËÆ¢ÂçïÈîôËØØÊó•Âøó - ÂçïÁã¨Â≠òÂÇ®
      new DailyRotateFile({
        filename: path.join(logDir, 'order-errors-%DATE%.log'),
        datePattern: 'YYYY-MM-DD',
        maxSize: '10m',
        maxFiles: '60d', // ÈîôËØØÊó•Âøó‰øùÁïô60Â§©
        level: 'error',
      }),
      // ÊéßÂà∂Âè∞ËæìÂá∫ÔºàÂºÄÂèëÁéØÂ¢ÉÔºâ
      ...(process.env.NODE_ENV === 'development' ? [
        new winston.transports.Console({
          level: 'info',
          format: winston.format.combine(
            winston.format.colorize(),
            winston.format.timestamp({ format: 'HH:mm:ss' }),
            winston.format.printf(({ timestamp, level, message, orderId, orderNumber, txId, errorReason, validationFailure, txInfoAnalysis, validationDetails, ...meta }) => {
              const orderInfo = orderId ? `[${orderNumber || orderId}]` : 
                               (txId && typeof txId === 'string') ? `[${txId.substring(0, 8)}...]` : '';
              
              let logMessage = `${timestamp} ${level}: üì¶ ${orderInfo} ${message}`;
              
              // Â¶ÇÊûúÊúâÈîôËØØÂéüÂõ†ÔºåÊòæÁ§∫ËØ¶ÁªÜ‰ø°ÊÅØ
              if (errorReason) {
                logMessage += `\n  üîç ÈîôËØØÂéüÂõ†: ${errorReason}`;
              }
              
              // Â¶ÇÊûúÊúâÈ™åËØÅÂ§±Ë¥•‰ø°ÊÅØÔºåÊòæÁ§∫ËØ¶ÁªÜ‰ø°ÊÅØ
              if (validationFailure && typeof validationFailure === 'object') {
                const failure = validationFailure as any;
                logMessage += `\n  ‚ùå È™åËØÅÂ§±Ë¥•: ${failure.reason || 'Unknown'}`;
              }
              
              // Â¶ÇÊûúÊúâ‰∫§Êòì‰ø°ÊÅØÂàÜÊûêÔºåÊòæÁ§∫ÂÖ≥ÈîÆ‰ø°ÊÅØ
              if (txInfoAnalysis && typeof txInfoAnalysis === 'object') {
                const analysis = txInfoAnalysis as any;
                logMessage += `\n  üìä ‰∫§ÊòìÂàÜÊûê: txInfoÂ≠òÂú®=${analysis.txInfoExists}, Á±ªÂûã=${analysis.txInfoType}`;
                if (analysis.txInfoKeys && Array.isArray(analysis.txInfoKeys) && analysis.txInfoKeys.length > 0) {
                  logMessage += `, Â≠óÊÆµ=[${analysis.txInfoKeys.slice(0, 5).join(', ')}${analysis.txInfoKeys.length > 5 ? '...' : ''}]`;
                }
              }
              
              // Â¶ÇÊûúÊúâÈ™åËØÅËØ¶ÁªÜ‰ø°ÊÅØÔºåÊòæÁ§∫ÂÖ≥ÈîÆ‰ø°ÊÅØ
              if (validationDetails && typeof validationDetails === 'object') {
                const details = validationDetails as any;
                logMessage += `\n  üîß È™åËØÅËØ¶ÊÉÖ: ÁΩëÁªú=${details.networkName}, TronWebÂèØÁî®=${details.tronWebInstanceAvailable}`;
                if (details.validationMethod) {
                  logMessage += `, È™åËØÅÊñπÊ≥ï=${details.validationMethod}`;
                }
              }
              
              // ÊòæÁ§∫ÂÖ∂‰ªñÈáçË¶ÅÁöÑÂÖÉÊï∞ÊçÆ
              const importantKeys = ['processStep', 'step', 'networkName', 'orderNumber'];
              const importantMeta = Object.entries(meta).filter(([key]) => importantKeys.includes(key));
              if (importantMeta.length > 0) {
                const metaStr = importantMeta.map(([key, value]) => `${key}=${value}`).join(', ');
                logMessage += `\n  ‚ÑπÔ∏è  ÂÖ∂‰ªñ‰ø°ÊÅØ: ${metaStr}`;
              }
              
              return logMessage;
            })
          )
        })
      ] : [])
    ]
  });
}
