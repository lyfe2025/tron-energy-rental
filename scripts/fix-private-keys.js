#!/usr/bin/env node

/**
 * ‰øÆÂ§çÁßÅÈí•Âç†‰ΩçÁ¨¶ËÑöÊú¨
 * Áî®‰∫é‰øÆÂ§çÁé∞ÊúâË¥¶Êà∑‰∏≠ÁöÑÁßÅÈí•Âç†‰ΩçÁ¨¶ÈóÆÈ¢ò
 */

const { exec } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// ANSIÈ¢úËâ≤‰ª£Á†Å
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m',
  bright: '\x1b[1m'
};

function log(message, color = 'white') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logHeader(message) {
  console.log('');
  log('='.repeat(60), 'cyan');
  log(`üîß ${message}`, 'cyan');
  log('='.repeat(60), 'cyan');
}

function logStep(step, message) {
  log(`${step}. ${message}`, 'yellow');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

async function getAuthToken() {
  return new Promise((resolve, reject) => {
    const cmd = `curl -s -X POST http://localhost:3001/api/auth/login -H "Content-Type: application/json" -d '{"email":"admin@tronrental.com","password":"admin123456"}' | jq -r .data.token`;
    
    exec(cmd, (error, stdout, stderr) => {
      if (error) {
        reject(error);
        return;
      }
      
      const token = stdout.trim();
      if (token && token !== 'null') {
        resolve(token);
      } else {
        reject(new Error('Failed to get auth token'));
      }
    });
  });
}

async function getProblematicAccounts() {
  return new Promise((resolve, reject) => {
    const cmd = `psql postgresql://postgres:postgres@localhost:5432/tron_energy_rental -t -c "SELECT id, name, tron_address, LENGTH(private_key_encrypted) as key_length FROM energy_pools WHERE LENGTH(private_key_encrypted) < 64;" | grep -v "^$"`;
    
    exec(cmd, (error, stdout, stderr) => {
      if (error && error.code !== 1) { // ÂøΩÁï•grepÊâæ‰∏çÂà∞ÁªìÊûúÁöÑÈîôËØØ
        reject(error);
        return;
      }
      
      const lines = stdout.trim().split('\n').filter(line => line.trim());
      const accounts = lines.map(line => {
        const parts = line.trim().split('|').map(p => p.trim());
        return {
          id: parts[0],
          name: parts[1],
          tron_address: parts[2],
          key_length: parseInt(parts[3])
        };
      }).filter(account => account.id);
      
      resolve(accounts);
    });
  });
}

async function fixPrivateKeys(token, accounts) {
  const fixData = {
    accounts: accounts.map(account => ({
      id: account.id,
      private_key_encrypted: generateSamplePrivateKey(account.name)
    }))
  };
  
  return new Promise((resolve, reject) => {
    const cmd = `curl -s -X POST http://localhost:3001/api/energy-pool/accounts/fix-private-keys \\
      -H "Content-Type: application/json" \\
      -H "Authorization: Bearer ${token}" \\
      -d '${JSON.stringify(fixData)}'`;
    
    exec(cmd, (error, stdout, stderr) => {
      if (error) {
        reject(error);
        return;
      }
      
      try {
        const result = JSON.parse(stdout);
        resolve(result);
      } catch (e) {
        reject(new Error(`Invalid JSON response: ${stdout}`));
      }
    });
  });
}

function generateSamplePrivateKey(accountName) {
  // ‰∏∫ÊØè‰∏™Ë¥¶Êà∑ÁîüÊàê‰∏Ä‰∏™Âü∫‰∫éÂêçÁß∞ÁöÑÁ§∫‰æãÁßÅÈí•Ôºà‰ªÖÁî®‰∫éÊºîÁ§∫Ôºâ
  const hash = require('crypto').createHash('sha256').update(accountName + 'sample_key').digest('hex');
  return hash;
}

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

async function main() {
  try {
    logHeader('ÁßÅÈí•Âç†‰ΩçÁ¨¶‰øÆÂ§çÂ∑•ÂÖ∑');
    
    logStep('1', 'Ê£ÄÊü•ÈóÆÈ¢òË¥¶Êà∑...');
    const accounts = await getProblematicAccounts();
    
    if (accounts.length === 0) {
      logSuccess('Ê≤°ÊúâÂèëÁé∞ÁßÅÈí•Âç†‰ΩçÁ¨¶ÈóÆÈ¢òÔºÅÊâÄÊúâË¥¶Êà∑ÁöÑÁßÅÈí•ÈÉΩÊòØÊ≠£Á°ÆÁöÑÊ†ºÂºè„ÄÇ');
      return;
    }
    
    log('\nÂèëÁé∞‰ª•‰∏ãË¥¶Êà∑ÊúâÁßÅÈí•Âç†‰ΩçÁ¨¶ÈóÆÈ¢ò:', 'red');
    accounts.forEach(account => {
      log(`  ‚Ä¢ ${account.name} (${account.tron_address}) - ÁßÅÈí•ÈïøÂ∫¶: ${account.key_length}`, 'yellow');
    });
    
    logWarning('Ëøô‰∫õË¥¶Êà∑ÁöÑÁßÅÈí•ÊòØÂç†‰ΩçÁ¨¶ÔºåÈúÄË¶ÅÊõøÊç¢‰∏∫ÁúüÂÆûÁöÑ64‰ΩçÂçÅÂÖ≠ËøõÂà∂ÁßÅÈí•');
    
    const confirm1 = await askQuestion('\n‚ùì ÊòØÂê¶ÁªßÁª≠‰øÆÂ§çËøô‰∫õË¥¶Êà∑ÁöÑÁßÅÈí•Ôºü(y/N): ');
    if (confirm1.toLowerCase() !== 'y' && confirm1.toLowerCase() !== 'yes') {
      log('Áî®Êà∑ÂèñÊ∂àÊìç‰Ωú', 'yellow');
      return;
    }
    
    logWarning('‚ö†Ô∏è  ÈáçË¶ÅÊèêÁ§∫: Ê≠§ËÑöÊú¨Â∞Ü‰∏∫ÊØè‰∏™Ë¥¶Êà∑ÁîüÊàêÁ§∫‰æãÁßÅÈí•Áî®‰∫éÊºîÁ§∫');
    logWarning('‚ö†Ô∏è  Âú®Áîü‰∫ßÁéØÂ¢É‰∏≠ÔºåÊÇ®Â∫îËØ•‰ΩøÁî®ÁúüÂÆûÁöÑ„ÄÅÂÆâÂÖ®ÁîüÊàêÁöÑÁßÅÈí•');
    
    const confirm2 = await askQuestion('\n‚ùì Á°ÆËÆ§Ë¶ÅÁî®Á§∫‰æãÁßÅÈí•ÊõøÊç¢Âç†‰ΩçÁ¨¶Ôºü(y/N): ');
    if (confirm2.toLowerCase() !== 'y' && confirm2.toLowerCase() !== 'yes') {
      log('Áî®Êà∑ÂèñÊ∂àÊìç‰Ωú', 'yellow');
      return;
    }
    
    logStep('2', 'Ëé∑ÂèñËÆ§ËØÅ‰ª§Áâå...');
    const token = await getAuthToken();
    logSuccess('ËÆ§ËØÅ‰ª§ÁâåËé∑ÂèñÊàêÂäü');
    
    logStep('3', '‰øÆÂ§çÁßÅÈí•Âç†‰ΩçÁ¨¶...');
    const result = await fixPrivateKeys(token, accounts);
    
    if (result.success) {
      logSuccess(result.message);
      
      if (result.data && result.data.summary) {
        const { total, success, failed } = result.data.summary;
        log(`\nüìä ‰øÆÂ§çÁªüËÆ°:`, 'cyan');
        log(`  ‚Ä¢ ÊÄªËÆ°: ${total} ‰∏™Ë¥¶Êà∑`, 'white');
        log(`  ‚Ä¢ ÊàêÂäü: ${success} ‰∏™Ë¥¶Êà∑`, 'green');
        log(`  ‚Ä¢ Â§±Ë¥•: ${failed} ‰∏™Ë¥¶Êà∑`, failed > 0 ? 'red' : 'white');
        
        if (result.data.results) {
          const failedResults = result.data.results.filter(r => !r.success);
          if (failedResults.length > 0) {
            log('\n‚ùå Â§±Ë¥•ÁöÑË¥¶Êà∑:', 'red');
            failedResults.forEach(r => {
              log(`  ‚Ä¢ ${r.id}: ${r.message}`, 'red');
            });
          }
        }
      }
    } else {
      logError(`‰øÆÂ§çÂ§±Ë¥•: ${result.message}`);
    }
    
    logStep('4', 'È™åËØÅ‰øÆÂ§çÁªìÊûú...');
    const remainingProblems = await getProblematicAccounts();
    
    if (remainingProblems.length === 0) {
      logSuccess('üéâ ÊâÄÊúâÁßÅÈí•ÈóÆÈ¢òÂ∑≤ÊàêÂäü‰øÆÂ§çÔºÅ');
    } else {
      logWarning(`‰ªçÊúâ ${remainingProblems.length} ‰∏™Ë¥¶Êà∑Â≠òÂú®ÁßÅÈí•ÈóÆÈ¢ò`);
    }
    
    log('\n‚ú® ‰øÆÂ§çÂÆåÊàêÔºÅ', 'green');
    logWarning('‚ö†Ô∏è  ËØ∑ËÆ∞‰ΩèÂú®Áîü‰∫ßÁéØÂ¢É‰∏≠‰ΩøÁî®ÁúüÂÆûÁöÑ„ÄÅÂÆâÂÖ®ÁöÑÁßÅÈí•');
    
  } catch (error) {
    logError(`‰øÆÂ§çËøáÁ®ãÂá∫Èîô: ${error.message}`);
    console.error(error);
  } finally {
    rl.close();
  }
}

// Â§ÑÁêÜ‰ºòÈõÖÈÄÄÂá∫
process.on('SIGINT', () => {
  log('\n\nÁî®Êà∑‰∏≠Êñ≠Êìç‰Ωú', 'yellow');
  rl.close();
  process.exit(0);
});

if (require.main === module) {
  main();
}
