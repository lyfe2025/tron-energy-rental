/**
 * BotË°®ÂçïÂÖ±‰∫´ÈÄªËæë
 * ËÅåË¥£ÔºöÊèê‰æõÊú∫Âô®‰∫∫Ë°®ÂçïÁõ∏ÂÖ≥ÁöÑÂÖ±‰∫´ÈÄªËæëÂíåÂ∑•ÂÖ∑ÂáΩÊï∞
 */
import { computed, reactive, ref } from 'vue'

// Ëá™ÂÆö‰πâÂëΩ‰ª§Á±ªÂûãÂÆö‰πâ
export interface CustomCommand {
  command: string
  response_message: string
  is_enabled: boolean
}

// ËèúÂçïÂëΩ‰ª§Á±ªÂûãÂÆö‰πâ  
export interface MenuCommand {
  command: string
  description: string
}

// Ë°®ÂçïÊï∞ÊçÆÁ±ªÂûãÂÆö‰πâ
export interface BotFormData {
  name: string
  username: string
  token: string
  description: string
  short_description: string
  network_id?: string
  work_mode: 'polling' | 'webhook'
  webhook_url: string
  webhook_secret: string
  max_connections: number
  welcome_message: string
  help_message: string
  custom_commands: CustomCommand[]
  menu_button_enabled: boolean
  menu_button_text: string
  menu_type: 'commands' | 'web_app'
  web_app_url: string
  menu_commands: MenuCommand[]
  keyboard_config: any
  is_active: boolean
}

// Êú∫Âô®‰∫∫Êï∞ÊçÆÁ±ªÂûãÂÆö‰πâ
export interface BotData {
  id: string
  name: string
  username: string
  token?: string
  description?: string
  short_description?: string
  work_mode?: 'polling' | 'webhook'
  webhook_url?: string
  webhook_secret?: string
  max_connections?: number
  welcome_message?: string
  help_message?: string
  keyboard_config?: any
  status: string
  health_status?: string
  last_health_check?: string
  total_users?: number
  total_orders?: number
  created_at: string
  updated_at: string
}

/**
 * Ëé∑ÂèñÈªòËÆ§ÈîÆÁõòÈÖçÁΩÆ
 */
export const getDefaultKeyboardConfig = () => ({
  main_menu: {
    type: 'inline',
    title: 'TRONËµÑÊ∫êÁßüËµÅ‰∏ªËèúÂçï',
    description: 'ÈÄâÊã©ÊÇ®ÈúÄË¶ÅÁöÑÊúçÂä°',
    is_enabled: true,
    rows: [
      {
        is_enabled: true,
        buttons: [
          {
            text: '‚ö° ËÉΩÈáèÈó™Áßü',
            callback_data: 'energy_flash',
            is_enabled: true,
            price_config_dependency: 'energy_flash'
          },
          {
            text: 'üî• Á¨îÊï∞Â•óÈ§ê',
            callback_data: 'transaction_package',
            is_enabled: true,
            price_config_dependency: 'transaction_package'
          }
        ]
      },
      {
        is_enabled: true,
        buttons: [
          {
            text: 'üîÑ TRXÈó™ÂÖë',
            callback_data: 'trx_exchange',
            is_enabled: true,
            price_config_dependency: 'trx_exchange'
          }
        ]
      },
      {
        is_enabled: true,
        buttons: [
          {
            text: 'üìã ÊàëÁöÑËÆ¢Âçï',
            callback_data: 'my_orders',
            is_enabled: true,
            price_config_dependency: undefined
          },
          {
            text: 'üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù',
            callback_data: 'check_balance',
            is_enabled: true,
            price_config_dependency: undefined
          }
        ]
      },
      {
        is_enabled: true,
        buttons: [
          {
            text: '‚ùì Â∏ÆÂä©ÊîØÊåÅ',
            callback_data: 'help_support',
            is_enabled: true,
            price_config_dependency: undefined
          },
          {
            text: 'üîÑ Âà∑Êñ∞ËèúÂçï',
            callback_data: 'refresh_menu',
            is_enabled: true,
            price_config_dependency: undefined
          }
        ]
      }
    ]
  },
  inline_keyboards: {},
  reply_keyboards: {},
  quick_actions: []
})

/**
 * Ëé∑ÂèñÈªòËÆ§Ë°®ÂçïÊï∞ÊçÆ
 */
export const getDefaultFormData = (mode: 'create' | 'edit' = 'create'): BotFormData => ({
  name: '',
  username: '',
  token: '',
  description: '',
  short_description: '',
  network_id: mode === 'create' ? '' : undefined,
  work_mode: 'polling',
  webhook_url: '',
  webhook_secret: '',
  max_connections: 40,
  welcome_message: mode === 'create' ? `Ê¨¢Ëøé‰ΩøÁî®TRONËÉΩÈáèÁßüËµÅÊú∫Âô®‰∫∫ÔºÅ

üéØ Êàë‰ª¨Êèê‰æõÔºö
‚ö° ËÉΩÈáèÈó™Áßü - Âø´ÈÄüËé∑ÂèñËÉΩÈáè
üî• Á¨îÊï∞Â•óÈ§ê - ÊâπÈáè‰∫§Êòì‰ºòÊÉ†  
üîÑ TRXÈó™ÂÖë - ‰æøÊç∑ÂÖëÊç¢ÊúçÂä°

ÁÇπÂáª‰∏ãÊñπÊåâÈíÆÂºÄÂßã‰ΩøÁî®üëá` : '',
  help_message: mode === 'create' ? `üìã ‰ΩøÁî®Â∏ÆÂä©

üîπ /start - ÊòæÁ§∫‰∏ªËèúÂçï
üîπ /help - ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ
üîπ /balance - Êü•ËØ¢Ë¥¶Êà∑‰ΩôÈ¢ù
üîπ /orders - Êü•ÁúãÊàëÁöÑËÆ¢Âçï

‚ùì ÈÅáÂà∞ÈóÆÈ¢òÔºü
ËÅîÁ≥ªÂÆ¢ÊúçÔºö@support` : '',
  custom_commands: [],
  menu_button_enabled: false,
  menu_button_text: 'ËèúÂçï',
  menu_type: 'commands',
  web_app_url: '',
  menu_commands: [
    {
      command: 'start',
      description: 'ÂºÄÂßã‰ΩøÁî®Êú∫Âô®‰∫∫'
    },
    {
      command: 'help',
      description: 'Ëé∑ÂèñÂ∏ÆÂä©‰ø°ÊÅØ'
    }
  ],
  keyboard_config: getDefaultKeyboardConfig(),
  is_active: true
})

/**
 * Webhook URLÈ™åËØÅ
 */
export const isValidWebhookUrl = (url: string): boolean => {
  try {
    const parsedUrl = new URL(url)
    return parsedUrl.protocol === 'https:' && parsedUrl.hostname !== 'localhost'
  } catch {
    return false
  }
}

/**
 * Êó∂Èó¥Ê†ºÂºèÂåñÂ∑•ÂÖ∑ÂáΩÊï∞
 */
export const formatTime = (timeString?: string) => {
  if (!timeString) return ''
  
  try {
    const date = new Date(timeString)
    return date.toLocaleString('zh-CN')
  } catch {
    return timeString
  }
}

/**
 * ÂÅ•Â∫∑Áä∂ÊÄÅÈ¢úËâ≤
 */
export const getHealthStatusColor = (status?: string) => {
  switch (status) {
    case 'healthy': 
      return 'bg-green-100 text-green-800'
    case 'unhealthy': 
      return 'bg-yellow-100 text-yellow-800'
    case 'error': 
      return 'bg-red-100 text-red-800'
    default: 
      return 'bg-gray-100 text-gray-800'
  }
}

/**
 * ÂÅ•Â∫∑Áä∂ÊÄÅÊñáÊú¨
 */
export const getHealthStatusText = (status?: string) => {
  switch (status) {
    case 'healthy': return 'ÂÅ•Â∫∑'
    case 'unhealthy': return 'ÂºÇÂ∏∏'
    case 'error': return 'ÈîôËØØ'
    default: return 'Êú™Áü•'
  }
}

/**
 * Êú∫Âô®‰∫∫Ë°®ÂçïÈÄªËæë composable
 */
export const useBotForm = (mode: 'create' | 'edit' = 'create') => {
  const formData = reactive<BotFormData>(getDefaultFormData(mode))
  const priceConfigsStatus = ref<{ [key: string]: boolean }>({})

  // Ë°®ÂçïÈ™åËØÅ
  const isFormValid = computed(() => {
    const basicValid = !!(
      formData.name.trim() &&
      formData.username.trim() &&
      formData.token.trim() &&
      formData.name.length >= 2 &&
      formData.name.length <= 50 &&
      formData.username.length >= 5 &&
      formData.username.length <= 32 &&
      /^[a-zA-Z][a-zA-Z0-9_]*[a-zA-Z0-9]$/.test(formData.username) &&
      /^\d+:[a-zA-Z0-9_-]+$/.test(formData.token)
    )
    
    // Â¶ÇÊûúÈÄâÊã©webhookÊ®°ÂºèÔºåÈúÄË¶ÅÈ™åËØÅwebhook_url
    if (formData.work_mode === 'webhook') {
      return basicValid && !!(formData.webhook_url.trim() && isValidWebhookUrl(formData.webhook_url))
    }
    
    return basicValid
  })

  // Ëé∑Âèñ‰ª∑Ê†ºÈÖçÁΩÆÁä∂ÊÄÅ
  const fetchPriceConfigsStatus = async () => {
    try {
      const response = await fetch('/api/price-configs/public/active')
      if (response.ok) {
        const configs = await response.json()
        const statusMap: { [key: string]: boolean } = {}
        configs.forEach((config: any) => {
          statusMap[config.mode_type] = config.is_active
        })
        priceConfigsStatus.value = statusMap
      }
    } catch (error) {
      console.error('Ëé∑Âèñ‰ª∑Ê†ºÈÖçÁΩÆÁä∂ÊÄÅÂ§±Ë¥•:', error)
    }
  }

  // ÂàùÂßãÂåñË°®ÂçïÊï∞ÊçÆÔºàÁºñËæëÊ®°ÂºèÔºâ
  const initializeFormData = (botData?: BotData | null) => {
    if (!botData) return
    
    Object.assign(formData, {
      name: botData.name || '',
      username: botData.username || '',
      token: botData.token || '',
      description: botData.description || '',
      short_description: botData.short_description || '',
      work_mode: botData.work_mode || 'polling',
      webhook_url: botData.webhook_url || '',
      webhook_secret: botData.webhook_secret || '',
      max_connections: botData.max_connections || 40,
      welcome_message: botData.welcome_message || '',
      help_message: botData.help_message || '',
      keyboard_config: botData.keyboard_config || getDefaultKeyboardConfig(),
      is_active: botData.status === 'active'
    })
  }

  // ÈáçÁΩÆË°®Âçï
  const resetForm = () => {
    Object.assign(formData, getDefaultFormData(mode))
  }

  // ‰ªéTelegramÂêåÊ≠•Êú∫Âô®‰∫∫‰ø°ÊÅØ
  const syncFromTelegram = async (botId: string) => {
    const response = await fetch(`/api/bots/${botId}/sync-from-telegram`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('admin_token')}`,
        'Content-Type': 'application/json'
      }
    })
    
    const result = await response.json()
    
    if (response.ok && result.success) {
      // Êõ¥Êñ∞Ë°®ÂçïÊï∞ÊçÆ
      if (result.data) {
        formData.name = result.data.name || formData.name
        formData.description = result.data.description || formData.description
        formData.short_description = result.data.short_description || formData.short_description
      }
      return { success: true, data: result.data }
    } else {
      throw new Error(result.message || 'ÂêåÊ≠•Â§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï')
    }
  }

  // Â∫îÁî®Ê®°ÂºèÂàáÊç¢
  const applyModeChange = async (botId: string, originalMode: 'polling' | 'webhook') => {
    if (formData.work_mode === originalMode) return

    const response = await fetch(`/api/bots/${botId}/switch-mode`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('admin_token')}`
      },
      body: JSON.stringify({
        work_mode: formData.work_mode,
        webhook_url: formData.work_mode === 'webhook' ? formData.webhook_url : null,
        webhook_secret: formData.work_mode === 'webhook' ? formData.webhook_secret : null,
        max_connections: formData.work_mode === 'webhook' ? formData.max_connections : null
      })
    })
    
    if (response.ok) {
      return { success: true, mode: formData.work_mode }
    } else {
      const error = await response.json()
      throw new Error(error.message || 'Ê®°ÂºèÂàáÊç¢Â§±Ë¥•')
    }
  }

  return {
    formData,
    priceConfigsStatus,
    isFormValid,
    fetchPriceConfigsStatus,
    initializeFormData,
    resetForm,
    syncFromTelegram,
    applyModeChange
  }
}
